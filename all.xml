<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Sheep observer</title>
<link>https://sheep.observer/all.html</link>
<atom:link href="https://sheep.observer/all.xml" rel="self" type="application/rss+xml"/>
<description>Szymon Bęczkowski&#39;s blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 11 Dec 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>A short introduction to functional programming in Julia</title>
  <dc:creator>Szymon Bęczkowski</dc:creator>
  <link>https://sheep.observer/programming/Julia-piping/piping.html</link>
  <description><![CDATA[ 



<p><a href="https://adventofcode.com">Advent of code</a> is a quaint site that posts one programming problem each day just before Christmas. Just so we can flex our programming muscle. More importanetly, we can eavsdrop on other people’s code. Looking at some of the solutions motivated me to write this tutorial.</p>
<p>A lot of people start learning programming with C++ or MATLAB. This inevitably leads to a very verbose and error-prone code. In this tutorial, I aim to illustrate how modern programming practices and a good language can lead to elegant solutions and maintainable code.</p>
<section id="the-problem" class="level2">
<h2 data-anchor-id="the-problem">The problem</h2>
<p>Advent of code <a href="https://adventofcode.com/2023/day/1">day one problem</a>. The problem boils down to: given a string, extract first and last digits in each line; join the two digits to form a two-digit number and add all resulting numbers.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb1-1">calibration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1abc2</span></span>
<span id="cb1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">pqr3stu8vwx</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a1b2c3d4e5f</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">treb7uchet</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
</section>
<section id="interlude-i-splitting-hair-lines" class="level2">
<h2 data-anchor-id="interlude-i-splitting-hair-lines">Interlude I: splitting <del>hair</del> lines</h2>
<p>Text manipulation is a fundamental challenge in programming, and nearly every programming language provides built-in primitives for this purpose.</p>
<p>Julia’s function <code>eachline</code> is a conveninent tool for splitting a string into individual lines. However, attempting to pass our <code>calibration</code> variable into <code>eachline</code> we will result in an error. Fortunately, the <a href="https://docs.julialang.org/en/v1/base/io-network/#Base.eachline">docs</a> provide guidance on this issue:</p>
<blockquote class="blockquote">
<p>To iterate over each line of a String, eachline(IOBuffer(str)) can be used.</p>
</blockquote>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cal_line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eachline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IOBuffer</span>(calibration))</span>
<span id="cb2-2">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> cal_line</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>cal_line = "1abc2"
cal_line = "pqr3stu8vwx"
cal_line = "a1b2c3d4e5f"
cal_line = "treb7uchet"</code></pre>
</div>
</div>
<p>Now that we understand how to split the <code>calibration</code> string into individual lines, the next step is to “simpy” extract the two-digit numbers from each line. Adding them is straightforward.</p>
</section>
<section id="the-actual-problem" class="level2">
<h2 data-anchor-id="the-actual-problem">The actual problem</h2>
<p>Looking within individual line, our problem can now be states as follows: given a string, extract first and last digits, and then join the two digits to form a two-digit number.</p>
<p>Let’s take one of the lines above and use it as a test case.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb4-1">cal_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a1b2c3d4e5f"</span></span></code></pre></div>
</div>
<p>Here’s a solution that is quite typical for students after completing their first MATLAB course:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb5-1">number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cal_line)</span>
<span id="cb5-5">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cal_line[i]</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isdigit</span>(s)</span>
<span id="cb5-7">        number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cal_line)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-15">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cal_line[i]</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isdigit</span>(s)</span>
<span id="cb5-17">        number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb5-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb5-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, number)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>number = ""
number = "1"
number = "15"</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>15</code></pre>
</div>
</div>
<p>It works but is also suuuuper long. If you are using an editor, like VSCode, you might notice some code underlined with a squiggly line. This is Julia’s linter telling us that:</p>
<blockquote class="blockquote">
<p>Indexing with indices obtained from <code>length</code>, <code>size</code> etc is discouraged. Use <code>eachindex</code> or <code>axes</code> instead.</p>
</blockquote>
<p>A linter is a tool that continously checks your code for possible errors and <a href="https://en.wikipedia.org/wiki/Anti-pattern">anti-patterns</a>. In this case, it points out that <code>for i in 1:length(cal_line)</code> is not cool. Let’s implement the proposed fix.</p>
<p>Rather than creating a vector of indexes <code>1:length(cal_line)</code>, we can directly obtain using <code>eachindex(cal_line)</code> for the first case and <code>Iterators.reverse(eachindex(cal_line))</code> for the second case. This approach is advisable because arrays in Julia can have arbitrary indexes. Forget about the war between <a href="https://en.wikipedia.org/wiki/Zero-based_numbering">0-based</a> and 1-based indexing styles. Embrace <a href="https://github.com/giordano/StarWarsArrays.jl">Star Wars movies order indexing</a>.</p>
<p>Notice that we did not use the <code>i</code> variable for anything other than indexing an element of the input string. We should take advantage of the fact that we can just iterate over anything that is iterable. Any <code>String</code> or <code>Array</code> or similar data structure is. If a data structure can be described similarly to: <em>a string is a collection of characters</em> or <em>an array is a collection of numbers</em> then it most likely is iterable.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb8-1">number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cal_line</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isdigit</span>(s)</span>
<span id="cb8-6">        number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb8-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span>(cal_line)</span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isdigit</span>(s)</span>
<span id="cb8-15">        number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb8-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb8-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> number</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, number)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>number = ""
number = "1"
number = "15"</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>15</code></pre>
</div>
</div>
<p>The code is now a bit prettier but it still appears repetitive and somewhat verbose. The first loop seeks the first numeric character, while the second loop seeks the last numeric character. In essence, they perform nearly identical tasks. They iterate over a collection of characters until they encounter a digit.</p>
<p>What if we first remove all the letters (non-digits) from the string? Then our search for digits will be much simpler. So, how do we go from <code>"a1b2c3d4e5f"</code> to <code>"12345"</code>?</p>
</section>
<section id="interlude-ii-map-filter-reduce" class="level2">
<h2 data-anchor-id="interlude-ii-map-filter-reduce">Interlude II: map filter reduce</h2>
<p>The three functions–<code>map</code>, <code>filter</code> and <code>reduce</code>–are the <a href="https://en.wikipedia.org/wiki/Functional_programming#Imperative_vs._functional_programming">workhorses</a> of <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a>.</p>
<ul>
<li><code>map</code> applies a function element-wise to a collection</li>
<li><code>filter</code> yields a sub-collection based on specified criteria</li>
<li><code>reduce</code> accumulates an output based on subsequent elements</li>
</ul>
<p>These three functions are powerful tools in functional programming paradigm and can be employed for a wide range of tasks.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clip</span>(x, x_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, x_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x_max <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_max <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> x_min <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_min <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clip</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@show</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clip</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span></span>
<span id="cb11-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>.(x)</span>
<span id="cb11-13">y_clipped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(clip, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map does the heavy lifting here</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Plots</span></span>
<span id="cb11-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sin(x)"</span>, xticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span>,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-π"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"π"</span>]))</span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot!</span>(x, y_clipped, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clipped sin(x)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>clip(-1) = -0.5
clip(0) = 0
clip(0.7) = 0.5</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip950">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip950)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip951">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip950)" d="M196.816 1800.78 L2640.76 1800.78 L2640.76 47.2441 L196.816 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip952">
    <rect x="196" y="47" width="2445" height="1755"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="265.984,1800.78 265.984,47.2441 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1419.37,1800.78 1419.37,47.2441 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2572.76,1800.78 2572.76,47.2441 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,1800.78 2640.76,1800.78 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="265.984,1800.78 265.984,1781.88 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1419.37,1800.78 1419.37,1781.88 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2572.76,1800.78 2572.76,1781.88 "></polyline>
<path clip-path="url(#clip950)" d="M244.977 1850.6 L257.454 1850.6 L257.454 1854.4 L244.977 1854.4 L244.977 1850.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M261.482 1839.56 L286.32 1839.56 L286.32 1843.82 L283.056 1843.82 L283.056 1859.74 Q283.056 1861.41 283.611 1862.15 Q284.19 1862.87 285.463 1862.87 Q285.81 1862.87 286.32 1862.82 Q286.829 1862.75 286.991 1862.73 L286.991 1865.81 Q286.181 1866.11 285.324 1866.25 Q284.468 1866.39 283.611 1866.39 Q280.834 1866.39 279.769 1864.88 Q278.704 1863.35 278.704 1859.28 L278.704 1843.82 L269.144 1843.82 L269.144 1865.48 L264.792 1865.48 L264.792 1843.82 L261.482 1843.82 L261.482 1839.56 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M1419.37 1834 Q1415.76 1834 1413.93 1837.57 Q1412.13 1841.11 1412.13 1848.24 Q1412.13 1855.34 1413.93 1858.91 Q1415.76 1862.45 1419.37 1862.45 Q1423 1862.45 1424.81 1858.91 Q1426.64 1855.34 1426.64 1848.24 Q1426.64 1841.11 1424.81 1837.57 Q1423 1834 1419.37 1834 M1419.37 1830.3 Q1425.18 1830.3 1428.24 1834.9 Q1431.32 1839.49 1431.32 1848.24 Q1431.32 1856.96 1428.24 1861.57 Q1425.18 1866.15 1419.37 1866.15 Q1413.56 1866.15 1410.48 1861.57 Q1407.43 1856.96 1407.43 1848.24 Q1407.43 1839.49 1410.48 1834.9 Q1413.56 1830.3 1419.37 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M2560 1839.56 L2584.84 1839.56 L2584.84 1843.82 L2581.58 1843.82 L2581.58 1859.74 Q2581.58 1861.41 2582.13 1862.15 Q2582.71 1862.87 2583.98 1862.87 Q2584.33 1862.87 2584.84 1862.82 Q2585.35 1862.75 2585.51 1862.73 L2585.51 1865.81 Q2584.7 1866.11 2583.85 1866.25 Q2582.99 1866.39 2582.13 1866.39 Q2579.35 1866.39 2578.29 1864.88 Q2577.22 1863.35 2577.22 1859.28 L2577.22 1843.82 L2567.66 1843.82 L2567.66 1865.48 L2563.31 1865.48 L2563.31 1843.82 L2560 1843.82 L2560 1839.56 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="196.816,1751.15 2640.76,1751.15 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="196.816,1337.58 2640.76,1337.58 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="196.816,924.011 2640.76,924.011 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="196.816,510.44 2640.76,510.44 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="196.816,96.8701 2640.76,96.8701 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,1800.78 196.816,47.2441 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,1751.15 215.714,1751.15 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,1337.58 215.714,1337.58 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,924.011 215.714,924.011 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,510.44 215.714,510.44 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="196.816,96.8701 215.714,96.8701 "></polyline>
<path clip-path="url(#clip950)" d="M49.5521 1751.6 L79.2279 1751.6 L79.2279 1755.54 L49.5521 1755.54 L49.5521 1751.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M90.1306 1764.5 L97.7695 1764.5 L97.7695 1738.13 L89.4593 1739.8 L89.4593 1735.54 L97.7232 1733.87 L102.399 1733.87 L102.399 1764.5 L110.038 1764.5 L110.038 1768.43 L90.1306 1768.43 L90.1306 1764.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M119.482 1762.55 L124.367 1762.55 L124.367 1768.43 L119.482 1768.43 L119.482 1762.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M144.552 1736.95 Q140.941 1736.95 139.112 1740.51 Q137.306 1744.06 137.306 1751.19 Q137.306 1758.29 139.112 1761.86 Q140.941 1765.4 144.552 1765.4 Q148.186 1765.4 149.991 1761.86 Q151.82 1758.29 151.82 1751.19 Q151.82 1744.06 149.991 1740.51 Q148.186 1736.95 144.552 1736.95 M144.552 1733.25 Q150.362 1733.25 153.417 1737.85 Q156.496 1742.44 156.496 1751.19 Q156.496 1759.91 153.417 1764.52 Q150.362 1769.1 144.552 1769.1 Q138.741 1769.1 135.663 1764.52 Q132.607 1759.91 132.607 1751.19 Q132.607 1742.44 135.663 1737.85 Q138.741 1733.25 144.552 1733.25 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M50.5475 1338.03 L80.2233 1338.03 L80.2233 1341.97 L50.5475 1341.97 L50.5475 1338.03 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M100.316 1323.38 Q96.7047 1323.38 94.876 1326.94 Q93.0704 1330.49 93.0704 1337.62 Q93.0704 1344.72 94.876 1348.29 Q96.7047 1351.83 100.316 1351.83 Q103.95 1351.83 105.756 1348.29 Q107.584 1344.72 107.584 1337.62 Q107.584 1330.49 105.756 1326.94 Q103.95 1323.38 100.316 1323.38 M100.316 1319.68 Q106.126 1319.68 109.181 1324.28 Q112.26 1328.87 112.26 1337.62 Q112.26 1346.34 109.181 1350.95 Q106.126 1355.53 100.316 1355.53 Q94.5056 1355.53 91.4269 1350.95 Q88.3714 1346.34 88.3714 1337.62 Q88.3714 1328.87 91.4269 1324.28 Q94.5056 1319.68 100.316 1319.68 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M120.478 1348.98 L125.362 1348.98 L125.362 1354.86 L120.478 1354.86 L120.478 1348.98 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M135.593 1320.3 L153.95 1320.3 L153.95 1324.24 L139.876 1324.24 L139.876 1332.71 Q140.894 1332.36 141.913 1332.2 Q142.931 1332.01 143.95 1332.01 Q149.737 1332.01 153.116 1335.19 Q156.496 1338.36 156.496 1343.77 Q156.496 1349.35 153.024 1352.45 Q149.552 1355.53 143.232 1355.53 Q141.056 1355.53 138.788 1355.16 Q136.542 1354.79 134.135 1354.05 L134.135 1349.35 Q136.218 1350.49 138.441 1351.04 Q140.663 1351.6 143.14 1351.6 Q147.144 1351.6 149.482 1349.49 Q151.82 1347.38 151.82 1343.77 Q151.82 1340.16 149.482 1338.06 Q147.144 1335.95 143.14 1335.95 Q141.265 1335.95 139.39 1336.37 Q137.538 1336.78 135.593 1337.66 L135.593 1320.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M99.3204 909.809 Q95.7093 909.809 93.8806 913.374 Q92.075 916.916 92.075 924.045 Q92.075 931.152 93.8806 934.717 Q95.7093 938.258 99.3204 938.258 Q102.955 938.258 104.76 934.717 Q106.589 931.152 106.589 924.045 Q106.589 916.916 104.76 913.374 Q102.955 909.809 99.3204 909.809 M99.3204 906.106 Q105.131 906.106 108.186 910.712 Q111.265 915.295 111.265 924.045 Q111.265 932.772 108.186 937.379 Q105.131 941.962 99.3204 941.962 Q93.5102 941.962 90.4315 937.379 Q87.376 932.772 87.376 924.045 Q87.376 915.295 90.4315 910.712 Q93.5102 906.106 99.3204 906.106 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M119.482 935.411 L124.367 935.411 L124.367 941.291 L119.482 941.291 L119.482 935.411 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M144.552 909.809 Q140.941 909.809 139.112 913.374 Q137.306 916.916 137.306 924.045 Q137.306 931.152 139.112 934.717 Q140.941 938.258 144.552 938.258 Q148.186 938.258 149.991 934.717 Q151.82 931.152 151.82 924.045 Q151.82 916.916 149.991 913.374 Q148.186 909.809 144.552 909.809 M144.552 906.106 Q150.362 906.106 153.417 910.712 Q156.496 915.295 156.496 924.045 Q156.496 932.772 153.417 937.379 Q150.362 941.962 144.552 941.962 Q138.741 941.962 135.663 937.379 Q132.607 932.772 132.607 924.045 Q132.607 915.295 135.663 910.712 Q138.741 906.106 144.552 906.106 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M100.316 496.239 Q96.7047 496.239 94.876 499.804 Q93.0704 503.345 93.0704 510.475 Q93.0704 517.582 94.876 521.146 Q96.7047 524.688 100.316 524.688 Q103.95 524.688 105.756 521.146 Q107.584 517.582 107.584 510.475 Q107.584 503.345 105.756 499.804 Q103.95 496.239 100.316 496.239 M100.316 492.535 Q106.126 492.535 109.181 497.142 Q112.26 501.725 112.26 510.475 Q112.26 519.202 109.181 523.808 Q106.126 528.392 100.316 528.392 Q94.5056 528.392 91.4269 523.808 Q88.3714 519.202 88.3714 510.475 Q88.3714 501.725 91.4269 497.142 Q94.5056 492.535 100.316 492.535 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M120.478 521.841 L125.362 521.841 L125.362 527.72 L120.478 527.72 L120.478 521.841 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M135.593 493.16 L153.95 493.16 L153.95 497.096 L139.876 497.096 L139.876 505.568 Q140.894 505.22 141.913 505.058 Q142.931 504.873 143.95 504.873 Q149.737 504.873 153.116 508.045 Q156.496 511.216 156.496 516.632 Q156.496 522.211 153.024 525.313 Q149.552 528.392 143.232 528.392 Q141.056 528.392 138.788 528.021 Q136.542 527.651 134.135 526.91 L134.135 522.211 Q136.218 523.345 138.441 523.901 Q140.663 524.456 143.14 524.456 Q147.144 524.456 149.482 522.35 Q151.82 520.244 151.82 516.632 Q151.82 513.021 149.482 510.915 Q147.144 508.808 143.14 508.808 Q141.265 508.808 139.39 509.225 Q137.538 509.642 135.593 510.521 L135.593 493.16 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M90.1306 110.215 L97.7695 110.215 L97.7695 83.8493 L89.4593 85.516 L89.4593 81.2567 L97.7232 79.5901 L102.399 79.5901 L102.399 110.215 L110.038 110.215 L110.038 114.15 L90.1306 114.15 L90.1306 110.215 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M119.482 108.27 L124.367 108.27 L124.367 114.15 L119.482 114.15 L119.482 108.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M144.552 82.6688 Q140.941 82.6688 139.112 86.2336 Q137.306 89.7752 137.306 96.9048 Q137.306 104.011 139.112 107.576 Q140.941 111.118 144.552 111.118 Q148.186 111.118 149.991 107.576 Q151.82 104.011 151.82 96.9048 Q151.82 89.7752 149.991 86.2336 Q148.186 82.6688 144.552 82.6688 M144.552 78.9651 Q150.362 78.9651 153.417 83.5715 Q156.496 88.1549 156.496 96.9048 Q156.496 105.632 153.417 110.238 Q150.362 114.821 144.552 114.821 Q138.741 114.821 135.663 110.238 Q132.607 105.632 132.607 96.9048 Q132.607 88.1549 135.663 83.5715 Q138.741 78.9651 144.552 78.9651 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip952)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="265.984,924.011 269.655,932.282 273.327,940.552 276.998,948.821 280.669,957.087 284.341,965.35 288.012,973.609 291.684,981.863 295.355,990.111 299.026,998.353 302.698,1006.59 306.369,1014.81 310.04,1023.03 313.712,1031.24 317.383,1039.43 321.054,1047.62 324.726,1055.79 328.397,1063.95 332.068,1072.09 335.74,1080.22 339.411,1088.34 343.082,1096.44 346.754,1104.52 350.425,1112.58 354.096,1120.62 357.768,1128.65 361.439,1136.65 365.11,1144.64 368.782,1152.6 372.453,1160.53 376.124,1168.45 379.796,1176.34 383.467,1184.2 387.138,1192.04 390.81,1199.85 394.481,1207.64 398.152,1215.39 401.824,1223.12 405.495,1230.81 409.167,1238.48 412.838,1246.11 416.509,1253.72 420.181,1261.29 423.852,1268.82 427.523,1276.32 431.195,1283.79 434.866,1291.22 438.537,1298.61 442.209,1305.97 445.88,1313.28 449.551,1320.56 453.223,1327.8 456.894,1335 460.565,1342.16 464.237,1349.27 467.908,1356.35 471.579,1363.38 475.251,1370.36 478.922,1377.3 482.593,1384.2 486.265,1391.05 489.936,1397.85 493.607,1404.61 497.279,1411.32 500.95,1417.98 504.621,1424.58 508.293,1431.14 511.964,1437.65 515.635,1444.11 519.307,1450.52 522.978,1456.87 526.649,1463.17 530.321,1469.41 533.992,1475.61 537.664,1481.74 541.335,1487.82 545.006,1493.85 548.678,1499.81 552.349,1505.72 556.02,1511.57 559.692,1517.36 563.363,1523.1 567.034,1528.77 570.706,1534.38 574.377,1539.94 578.048,1545.43 581.72,1550.85 585.391,1556.22 589.062,1561.52 592.734,1566.76 596.405,1571.93 600.076,1577.04 603.748,1582.09 607.419,1587.06 611.09,1591.97 614.762,1596.82 618.433,1601.6 622.104,1606.31 625.776,1610.95 629.447,1615.52 633.118,1620.03 636.79,1624.46 640.461,1628.82 644.132,1633.12 647.804,1637.34 651.475,1641.49 655.147,1645.57 658.818,1649.58 662.489,1653.51 666.161,1657.38 669.832,1661.16 673.503,1664.88 677.175,1668.52 680.846,1672.09 684.517,1675.58 688.189,1678.99 691.86,1682.34 695.531,1685.6 699.203,1688.79 702.874,1691.9 706.545,1694.94 710.217,1697.9 713.888,1700.78 717.559,1703.58 721.231,1706.31 724.902,1708.95 728.573,1711.52 732.245,1714.01 735.916,1716.42 739.587,1718.76 743.259,1721.01 746.93,1723.18 750.601,1725.27 754.273,1727.29 757.944,1729.22 761.615,1731.07 765.287,1732.84 768.958,1734.53 772.63,1736.14 776.301,1737.67 779.972,1739.12 783.644,1740.48 787.315,1741.76 790.986,1742.97 794.658,1744.09 798.329,1745.12 802,1746.08 805.672,1746.95 809.343,1747.74 813.014,1748.45 816.686,1749.08 820.357,1749.62 824.028,1750.08 827.7,1750.46 831.371,1750.76 835.042,1750.97 838.714,1751.1 842.385,1751.15 846.056,1751.12 849.728,1751 853.399,1750.8 857.07,1750.52 860.742,1750.15 864.413,1749.7 868.084,1749.17 871.756,1748.56 875.427,1747.86 879.098,1747.08 882.77,1746.22 886.441,1745.28 890.112,1744.26 893.784,1743.15 897.455,1741.96 901.127,1740.69 904.798,1739.34 908.469,1737.91 912.141,1736.39 915.812,1734.79 919.483,1733.12 923.155,1731.36 926.826,1729.52 930.497,1727.6 934.169,1725.6 937.84,1723.52 941.511,1721.36 945.183,1719.12 948.854,1716.8 952.525,1714.4 956.197,1711.93 959.868,1709.37 963.539,1706.73 967.211,1704.02 970.882,1701.23 974.553,1698.36 978.225,1695.41 981.896,1692.39 985.567,1689.29 989.239,1686.11 992.91,1682.86 996.581,1679.53 1000.25,1676.13 1003.92,1672.65 1007.6,1669.09 1011.27,1665.46 1014.94,1661.76 1018.61,1657.98 1022.28,1654.13 1025.95,1650.21 1029.62,1646.21 1033.29,1642.15 1036.97,1638.01 1040.64,1633.79 1044.31,1629.51 1047.98,1625.16 1051.65,1620.74 1055.32,1616.24 1058.99,1611.68 1062.67,1607.05 1066.34,1602.35 1070.01,1597.59 1073.68,1592.75 1077.35,1587.85 1081.02,1582.88 1084.69,1577.85 1088.37,1572.75 1092.04,1567.59 1095.71,1562.36 1099.38,1557.07 1103.05,1551.71 1106.72,1546.29 1110.39,1540.81 1114.06,1535.27 1117.74,1529.67 1121.41,1524.01 1125.08,1518.28 1128.75,1512.5 1132.42,1506.66 1136.09,1500.76 1139.76,1494.8 1143.44,1488.78 1147.11,1482.71 1150.78,1476.59 1154.45,1470.4 1158.12,1464.17 1161.79,1457.88 1165.46,1451.53 1169.13,1445.13 1172.81,1438.69 1176.48,1432.18 1180.15,1425.63 1183.82,1419.03 1187.49,1412.38 1191.16,1405.68 1194.83,1398.93 1198.51,1392.14 1202.18,1385.29 1205.85,1378.4 1209.52,1371.47 1213.19,1364.49 1216.86,1357.47 1220.53,1350.4 1224.2,1343.29 1227.88,1336.14 1231.55,1328.95 1235.22,1321.72 1238.89,1314.45 1242.56,1307.13 1246.23,1299.79 1249.9,1292.4 1253.58,1284.97 1257.25,1277.51 1260.92,1270.02 1264.59,1262.49 1268.26,1254.92 1271.93,1247.33 1275.6,1239.7 1279.27,1232.04 1282.95,1224.35 1286.62,1216.62 1290.29,1208.87 1293.96,1201.09 1297.63,1193.29 1301.3,1185.45 1304.97,1177.59 1308.65,1169.71 1312.32,1161.8 1315.99,1153.86 1319.66,1145.9 1323.33,1137.93 1327,1129.92 1330.67,1121.9 1334.35,1113.86 1338.02,1105.8 1341.69,1097.72 1345.36,1089.63 1349.03,1081.52 1352.7,1073.39 1356.37,1065.25 1360.04,1057.09 1363.72,1048.92 1367.39,1040.74 1371.06,1032.54 1374.73,1024.34 1378.4,1016.12 1382.07,1007.9 1385.74,999.665 1389.42,991.424 1393.09,983.177 1396.76,974.924 1400.43,966.666 1404.1,958.404 1407.77,950.138 1411.44,941.869 1415.11,933.599 1418.79,925.328 1422.46,917.057 1426.13,908.786 1429.8,900.517 1433.47,892.25 1437.14,883.987 1440.81,875.727 1444.49,867.472 1448.16,859.223 1451.83,850.981 1455.5,842.745 1459.17,834.518 1462.84,826.3 1466.51,818.091 1470.18,809.893 1473.86,801.707 1477.53,793.533 1481.2,785.372 1484.87,777.224 1488.54,769.092 1492.21,760.974 1495.88,752.874 1499.56,744.79 1503.23,736.724 1506.9,728.677 1510.57,720.649 1514.24,712.642 1517.91,704.656 1521.58,696.692 1525.25,688.751 1528.93,680.833 1532.6,672.939 1536.27,665.071 1539.94,657.228 1543.61,649.412 1547.28,641.624 1550.95,633.864 1554.63,626.132 1558.3,618.431 1561.97,610.76 1565.64,603.121 1569.31,595.513 1572.98,587.939 1576.65,580.398 1580.33,572.891 1584,565.42 1587.67,557.984 1591.34,550.585 1595.01,543.223 1598.68,535.9 1602.35,528.615 1606.02,521.37 1609.7,514.165 1613.37,507.001 1617.04,499.878 1620.71,492.798 1624.38,485.762 1628.05,478.769 1631.72,471.82 1635.4,464.917 1639.07,458.06 1642.74,451.249 1646.41,444.486 1650.08,437.77 1653.75,431.103 1657.42,424.486 1661.09,417.918 1664.77,411.401 1668.44,404.935 1672.11,398.522 1675.78,392.16 1679.45,385.852 1683.12,379.598 1686.79,373.398 1690.47,367.253 1694.14,361.164 1697.81,355.131 1701.48,349.155 1705.15,343.237 1708.82,337.377 1712.49,331.575 1716.16,325.832 1719.84,320.15 1723.51,314.528 1727.18,308.966 1730.85,303.466 1734.52,298.029 1738.19,292.653 1741.86,287.341 1745.54,282.093 1749.21,276.909 1752.88,271.789 1756.55,266.735 1760.22,261.747 1763.89,256.824 1767.56,251.969 1771.23,247.18 1774.91,242.46 1778.58,237.807 1782.25,233.223 1785.92,228.709 1789.59,224.263 1793.26,219.888 1796.93,215.583 1800.61,211.349 1804.28,207.186 1807.95,203.095 1811.62,199.076 1815.29,195.129 1818.96,191.256 1822.63,187.455 1826.31,183.729 1829.98,180.076 1833.65,176.498 1837.32,172.994 1840.99,169.566 1844.66,166.213 1848.33,162.935 1852,159.734 1855.68,156.61 1859.35,153.562 1863.02,150.591 1866.69,147.697 1870.36,144.881 1874.03,142.143 1877.7,139.483 1881.38,136.902 1885.05,134.399 1888.72,131.976 1892.39,129.631 1896.06,127.366 1899.73,125.181 1903.4,123.075 1907.07,121.05 1910.75,119.104 1914.42,117.24 1918.09,115.456 1921.76,113.753 1925.43,112.131 1929.1,110.59 1932.77,109.13 1936.45,107.752 1940.12,106.456 1943.79,105.241 1947.46,104.108 1951.13,103.057 1954.8,102.089 1958.47,101.202 1962.14,100.398 1965.82,99.6758 1969.49,99.0363 1973.16,98.4793 1976.83,98.0049 1980.5,97.6131 1984.17,97.3039 1987.84,97.0774 1991.52,96.9336 1995.19,96.8724 1998.86,96.894 2002.53,96.9984 2006.2,97.1854 2009.87,97.4551 2013.54,97.8074 2017.21,98.2424 2020.89,98.7599 2024.56,99.36 2028.23,100.042 2031.9,100.807 2035.57,101.655 2039.24,102.584 2042.91,103.596 2046.59,104.689 2050.26,105.865 2053.93,107.122 2057.6,108.462 2061.27,109.882 2064.94,111.384 2068.61,112.968 2072.29,114.632 2075.96,116.377 2079.63,118.203 2083.3,120.11 2086.97,122.097 2090.64,124.165 2094.31,126.312 2097.98,128.539 2101.66,130.845 2105.33,133.231 2109,135.696 2112.67,138.24 2116.34,140.863 2120.01,143.563 2123.68,146.342 2127.36,149.199 2131.03,152.133 2134.7,155.144 2138.37,158.232 2142.04,161.396 2145.71,164.637 2149.38,167.954 2153.05,171.347 2156.73,174.814 2160.4,178.357 2164.07,181.974 2167.74,185.666 2171.41,189.431 2175.08,193.269 2178.75,197.181 2182.43,201.166 2186.1,205.222 2189.77,209.351 2193.44,213.551 2197.11,217.822 2200.78,222.164 2204.45,226.576 2208.12,231.058 2211.8,235.608 2215.47,240.228 2219.14,244.916 2222.81,249.673 2226.48,254.496 2230.15,259.387 2233.82,264.343 2237.5,269.366 2241.17,274.455 2244.84,279.608 2248.51,284.826 2252.18,290.107 2255.85,295.453 2259.52,300.86 2263.19,306.331 2266.87,311.863 2270.54,317.456 2274.21,323.11 2277.88,328.824 2281.55,334.597 2285.22,340.43 2288.89,346.32 2292.57,352.269 2296.24,358.275 2299.91,364.337 2303.58,370.455 2307.25,376.629 2310.92,382.857 2314.59,389.14 2318.27,395.476 2321.94,401.864 2325.61,408.305 2329.28,414.798 2332.95,421.342 2336.62,427.935 2340.29,434.579 2343.96,441.271 2347.64,448.012 2351.31,454.8 2354.98,461.635 2358.65,468.516 2362.32,475.443 2365.99,482.415 2369.66,489.431 2373.34,496.49 2377.01,503.592 2380.68,510.737 2384.35,517.922 2388.02,525.148 2391.69,532.414 2395.36,539.719 2399.03,547.063 2402.71,554.444 2406.38,561.862 2410.05,569.317 2413.72,576.807 2417.39,584.331 2421.06,591.89 2424.73,599.482 2428.41,607.106 2432.08,614.762 2435.75,622.449 2439.42,630.166 2443.09,637.912 2446.76,645.687 2450.43,653.49 2454.1,661.32 2457.78,669.176 2461.45,677.058 2465.12,684.964 2468.79,692.895 2472.46,700.848 2476.13,708.824 2479.8,716.821 2483.48,724.839 2487.15,732.877 2490.82,740.934 2494.49,749.009 2498.16,757.102 2501.83,765.211 2505.5,773.337 2509.17,781.477 2512.85,789.632 2516.52,797.8 2520.19,805.981 2523.86,814.173 2527.53,822.377 2531.2,830.59 2534.87,838.813 2538.55,847.045 2542.22,855.284 2545.89,863.53 2549.56,871.782 2553.23,880.04 2556.9,888.301 2560.57,896.567 2564.25,904.835 2567.92,913.105 2571.59,921.376 "></polyline>
<polyline clip-path="url(#clip952)" style="stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="265.984,924.011 269.655,932.282 273.327,940.552 276.998,948.821 280.669,957.087 284.341,965.35 288.012,973.609 291.684,981.863 295.355,990.111 299.026,998.353 302.698,1006.59 306.369,1014.81 310.04,1023.03 313.712,1031.24 317.383,1039.43 321.054,1047.62 324.726,1055.79 328.397,1063.95 332.068,1072.09 335.74,1080.22 339.411,1088.34 343.082,1096.44 346.754,1104.52 350.425,1112.58 354.096,1120.62 357.768,1128.65 361.439,1136.65 365.11,1144.64 368.782,1152.6 372.453,1160.53 376.124,1168.45 379.796,1176.34 383.467,1184.2 387.138,1192.04 390.81,1199.85 394.481,1207.64 398.152,1215.39 401.824,1223.12 405.495,1230.81 409.167,1238.48 412.838,1246.11 416.509,1253.72 420.181,1261.29 423.852,1268.82 427.523,1276.32 431.195,1283.79 434.866,1291.22 438.537,1298.61 442.209,1305.97 445.88,1313.28 449.551,1320.56 453.223,1327.8 456.894,1335 460.565,1337.58 464.237,1337.58 467.908,1337.58 471.579,1337.58 475.251,1337.58 478.922,1337.58 482.593,1337.58 486.265,1337.58 489.936,1337.58 493.607,1337.58 497.279,1337.58 500.95,1337.58 504.621,1337.58 508.293,1337.58 511.964,1337.58 515.635,1337.58 519.307,1337.58 522.978,1337.58 526.649,1337.58 530.321,1337.58 533.992,1337.58 537.664,1337.58 541.335,1337.58 545.006,1337.58 548.678,1337.58 552.349,1337.58 556.02,1337.58 559.692,1337.58 563.363,1337.58 567.034,1337.58 570.706,1337.58 574.377,1337.58 578.048,1337.58 581.72,1337.58 585.391,1337.58 589.062,1337.58 592.734,1337.58 596.405,1337.58 600.076,1337.58 603.748,1337.58 607.419,1337.58 611.09,1337.58 614.762,1337.58 618.433,1337.58 622.104,1337.58 625.776,1337.58 629.447,1337.58 633.118,1337.58 636.79,1337.58 640.461,1337.58 644.132,1337.58 647.804,1337.58 651.475,1337.58 655.147,1337.58 658.818,1337.58 662.489,1337.58 666.161,1337.58 669.832,1337.58 673.503,1337.58 677.175,1337.58 680.846,1337.58 684.517,1337.58 688.189,1337.58 691.86,1337.58 695.531,1337.58 699.203,1337.58 702.874,1337.58 706.545,1337.58 710.217,1337.58 713.888,1337.58 717.559,1337.58 721.231,1337.58 724.902,1337.58 728.573,1337.58 732.245,1337.58 735.916,1337.58 739.587,1337.58 743.259,1337.58 746.93,1337.58 750.601,1337.58 754.273,1337.58 757.944,1337.58 761.615,1337.58 765.287,1337.58 768.958,1337.58 772.63,1337.58 776.301,1337.58 779.972,1337.58 783.644,1337.58 787.315,1337.58 790.986,1337.58 794.658,1337.58 798.329,1337.58 802,1337.58 805.672,1337.58 809.343,1337.58 813.014,1337.58 816.686,1337.58 820.357,1337.58 824.028,1337.58 827.7,1337.58 831.371,1337.58 835.042,1337.58 838.714,1337.58 842.385,1337.58 846.056,1337.58 849.728,1337.58 853.399,1337.58 857.07,1337.58 860.742,1337.58 864.413,1337.58 868.084,1337.58 871.756,1337.58 875.427,1337.58 879.098,1337.58 882.77,1337.58 886.441,1337.58 890.112,1337.58 893.784,1337.58 897.455,1337.58 901.127,1337.58 904.798,1337.58 908.469,1337.58 912.141,1337.58 915.812,1337.58 919.483,1337.58 923.155,1337.58 926.826,1337.58 930.497,1337.58 934.169,1337.58 937.84,1337.58 941.511,1337.58 945.183,1337.58 948.854,1337.58 952.525,1337.58 956.197,1337.58 959.868,1337.58 963.539,1337.58 967.211,1337.58 970.882,1337.58 974.553,1337.58 978.225,1337.58 981.896,1337.58 985.567,1337.58 989.239,1337.58 992.91,1337.58 996.581,1337.58 1000.25,1337.58 1003.92,1337.58 1007.6,1337.58 1011.27,1337.58 1014.94,1337.58 1018.61,1337.58 1022.28,1337.58 1025.95,1337.58 1029.62,1337.58 1033.29,1337.58 1036.97,1337.58 1040.64,1337.58 1044.31,1337.58 1047.98,1337.58 1051.65,1337.58 1055.32,1337.58 1058.99,1337.58 1062.67,1337.58 1066.34,1337.58 1070.01,1337.58 1073.68,1337.58 1077.35,1337.58 1081.02,1337.58 1084.69,1337.58 1088.37,1337.58 1092.04,1337.58 1095.71,1337.58 1099.38,1337.58 1103.05,1337.58 1106.72,1337.58 1110.39,1337.58 1114.06,1337.58 1117.74,1337.58 1121.41,1337.58 1125.08,1337.58 1128.75,1337.58 1132.42,1337.58 1136.09,1337.58 1139.76,1337.58 1143.44,1337.58 1147.11,1337.58 1150.78,1337.58 1154.45,1337.58 1158.12,1337.58 1161.79,1337.58 1165.46,1337.58 1169.13,1337.58 1172.81,1337.58 1176.48,1337.58 1180.15,1337.58 1183.82,1337.58 1187.49,1337.58 1191.16,1337.58 1194.83,1337.58 1198.51,1337.58 1202.18,1337.58 1205.85,1337.58 1209.52,1337.58 1213.19,1337.58 1216.86,1337.58 1220.53,1337.58 1224.2,1337.58 1227.88,1336.14 1231.55,1328.95 1235.22,1321.72 1238.89,1314.45 1242.56,1307.13 1246.23,1299.79 1249.9,1292.4 1253.58,1284.97 1257.25,1277.51 1260.92,1270.02 1264.59,1262.49 1268.26,1254.92 1271.93,1247.33 1275.6,1239.7 1279.27,1232.04 1282.95,1224.35 1286.62,1216.62 1290.29,1208.87 1293.96,1201.09 1297.63,1193.29 1301.3,1185.45 1304.97,1177.59 1308.65,1169.71 1312.32,1161.8 1315.99,1153.86 1319.66,1145.9 1323.33,1137.93 1327,1129.92 1330.67,1121.9 1334.35,1113.86 1338.02,1105.8 1341.69,1097.72 1345.36,1089.63 1349.03,1081.52 1352.7,1073.39 1356.37,1065.25 1360.04,1057.09 1363.72,1048.92 1367.39,1040.74 1371.06,1032.54 1374.73,1024.34 1378.4,1016.12 1382.07,1007.9 1385.74,999.665 1389.42,991.424 1393.09,983.177 1396.76,974.924 1400.43,966.666 1404.1,958.404 1407.77,950.138 1411.44,941.869 1415.11,933.599 1418.79,925.328 1422.46,917.057 1426.13,908.786 1429.8,900.517 1433.47,892.25 1437.14,883.987 1440.81,875.727 1444.49,867.472 1448.16,859.223 1451.83,850.981 1455.5,842.745 1459.17,834.518 1462.84,826.3 1466.51,818.091 1470.18,809.893 1473.86,801.707 1477.53,793.533 1481.2,785.372 1484.87,777.224 1488.54,769.092 1492.21,760.974 1495.88,752.874 1499.56,744.79 1503.23,736.724 1506.9,728.677 1510.57,720.649 1514.24,712.642 1517.91,704.656 1521.58,696.692 1525.25,688.751 1528.93,680.833 1532.6,672.939 1536.27,665.071 1539.94,657.228 1543.61,649.412 1547.28,641.624 1550.95,633.864 1554.63,626.132 1558.3,618.431 1561.97,610.76 1565.64,603.121 1569.31,595.513 1572.98,587.939 1576.65,580.398 1580.33,572.891 1584,565.42 1587.67,557.984 1591.34,550.585 1595.01,543.223 1598.68,535.9 1602.35,528.615 1606.02,521.37 1609.7,514.165 1613.37,510.44 1617.04,510.44 1620.71,510.44 1624.38,510.44 1628.05,510.44 1631.72,510.44 1635.4,510.44 1639.07,510.44 1642.74,510.44 1646.41,510.44 1650.08,510.44 1653.75,510.44 1657.42,510.44 1661.09,510.44 1664.77,510.44 1668.44,510.44 1672.11,510.44 1675.78,510.44 1679.45,510.44 1683.12,510.44 1686.79,510.44 1690.47,510.44 1694.14,510.44 1697.81,510.44 1701.48,510.44 1705.15,510.44 1708.82,510.44 1712.49,510.44 1716.16,510.44 1719.84,510.44 1723.51,510.44 1727.18,510.44 1730.85,510.44 1734.52,510.44 1738.19,510.44 1741.86,510.44 1745.54,510.44 1749.21,510.44 1752.88,510.44 1756.55,510.44 1760.22,510.44 1763.89,510.44 1767.56,510.44 1771.23,510.44 1774.91,510.44 1778.58,510.44 1782.25,510.44 1785.92,510.44 1789.59,510.44 1793.26,510.44 1796.93,510.44 1800.61,510.44 1804.28,510.44 1807.95,510.44 1811.62,510.44 1815.29,510.44 1818.96,510.44 1822.63,510.44 1826.31,510.44 1829.98,510.44 1833.65,510.44 1837.32,510.44 1840.99,510.44 1844.66,510.44 1848.33,510.44 1852,510.44 1855.68,510.44 1859.35,510.44 1863.02,510.44 1866.69,510.44 1870.36,510.44 1874.03,510.44 1877.7,510.44 1881.38,510.44 1885.05,510.44 1888.72,510.44 1892.39,510.44 1896.06,510.44 1899.73,510.44 1903.4,510.44 1907.07,510.44 1910.75,510.44 1914.42,510.44 1918.09,510.44 1921.76,510.44 1925.43,510.44 1929.1,510.44 1932.77,510.44 1936.45,510.44 1940.12,510.44 1943.79,510.44 1947.46,510.44 1951.13,510.44 1954.8,510.44 1958.47,510.44 1962.14,510.44 1965.82,510.44 1969.49,510.44 1973.16,510.44 1976.83,510.44 1980.5,510.44 1984.17,510.44 1987.84,510.44 1991.52,510.44 1995.19,510.44 1998.86,510.44 2002.53,510.44 2006.2,510.44 2009.87,510.44 2013.54,510.44 2017.21,510.44 2020.89,510.44 2024.56,510.44 2028.23,510.44 2031.9,510.44 2035.57,510.44 2039.24,510.44 2042.91,510.44 2046.59,510.44 2050.26,510.44 2053.93,510.44 2057.6,510.44 2061.27,510.44 2064.94,510.44 2068.61,510.44 2072.29,510.44 2075.96,510.44 2079.63,510.44 2083.3,510.44 2086.97,510.44 2090.64,510.44 2094.31,510.44 2097.98,510.44 2101.66,510.44 2105.33,510.44 2109,510.44 2112.67,510.44 2116.34,510.44 2120.01,510.44 2123.68,510.44 2127.36,510.44 2131.03,510.44 2134.7,510.44 2138.37,510.44 2142.04,510.44 2145.71,510.44 2149.38,510.44 2153.05,510.44 2156.73,510.44 2160.4,510.44 2164.07,510.44 2167.74,510.44 2171.41,510.44 2175.08,510.44 2178.75,510.44 2182.43,510.44 2186.1,510.44 2189.77,510.44 2193.44,510.44 2197.11,510.44 2200.78,510.44 2204.45,510.44 2208.12,510.44 2211.8,510.44 2215.47,510.44 2219.14,510.44 2222.81,510.44 2226.48,510.44 2230.15,510.44 2233.82,510.44 2237.5,510.44 2241.17,510.44 2244.84,510.44 2248.51,510.44 2252.18,510.44 2255.85,510.44 2259.52,510.44 2263.19,510.44 2266.87,510.44 2270.54,510.44 2274.21,510.44 2277.88,510.44 2281.55,510.44 2285.22,510.44 2288.89,510.44 2292.57,510.44 2296.24,510.44 2299.91,510.44 2303.58,510.44 2307.25,510.44 2310.92,510.44 2314.59,510.44 2318.27,510.44 2321.94,510.44 2325.61,510.44 2329.28,510.44 2332.95,510.44 2336.62,510.44 2340.29,510.44 2343.96,510.44 2347.64,510.44 2351.31,510.44 2354.98,510.44 2358.65,510.44 2362.32,510.44 2365.99,510.44 2369.66,510.44 2373.34,510.44 2377.01,510.44 2380.68,510.737 2384.35,517.922 2388.02,525.148 2391.69,532.414 2395.36,539.719 2399.03,547.063 2402.71,554.444 2406.38,561.862 2410.05,569.317 2413.72,576.807 2417.39,584.331 2421.06,591.89 2424.73,599.482 2428.41,607.106 2432.08,614.762 2435.75,622.449 2439.42,630.166 2443.09,637.912 2446.76,645.687 2450.43,653.49 2454.1,661.32 2457.78,669.176 2461.45,677.058 2465.12,684.964 2468.79,692.895 2472.46,700.848 2476.13,708.824 2479.8,716.821 2483.48,724.839 2487.15,732.877 2490.82,740.934 2494.49,749.009 2498.16,757.102 2501.83,765.211 2505.5,773.337 2509.17,781.477 2512.85,789.632 2516.52,797.8 2520.19,805.981 2523.86,814.173 2527.53,822.377 2531.2,830.59 2534.87,838.813 2538.55,847.045 2542.22,855.284 2545.89,863.53 2549.56,871.782 2553.23,880.04 2556.9,888.301 2560.57,896.567 2564.25,904.835 2567.92,913.105 2571.59,921.376 "></polyline>
<path clip-path="url(#clip950)" d="M278.281 261.215 L835.867 261.215 L835.867 105.695 L278.281 105.695  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="278.281,261.215 835.867,261.215 835.867,105.695 278.281,105.695 278.281,261.215 "></polyline>
<polyline clip-path="url(#clip950)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.436,157.535 468.365,157.535 "></polyline>
<path clip-path="url(#clip950)" d="M513.946 149.653 L513.946 153.681 Q512.14 152.755 510.196 152.292 Q508.251 151.829 506.168 151.829 Q502.997 151.829 501.399 152.801 Q499.825 153.774 499.825 155.718 Q499.825 157.2 500.96 158.056 Q502.094 158.889 505.52 159.653 L506.978 159.977 Q511.515 160.95 513.413 162.732 Q515.334 164.491 515.334 167.663 Q515.334 171.274 512.464 173.38 Q509.617 175.487 504.617 175.487 Q502.534 175.487 500.265 175.07 Q498.02 174.676 495.52 173.866 L495.52 169.468 Q497.881 170.695 500.173 171.32 Q502.464 171.922 504.71 171.922 Q507.719 171.922 509.339 170.903 Q510.959 169.862 510.959 167.987 Q510.959 166.25 509.779 165.325 Q508.622 164.399 504.663 163.542 L503.182 163.195 Q499.223 162.362 497.464 160.649 Q495.705 158.913 495.705 155.903 Q495.705 152.246 498.298 150.255 Q500.89 148.264 505.659 148.264 Q508.02 148.264 510.103 148.612 Q512.186 148.959 513.946 149.653 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M522.117 148.889 L526.376 148.889 L526.376 174.815 L522.117 174.815 L522.117 148.889 M522.117 138.797 L526.376 138.797 L526.376 144.19 L522.117 144.19 L522.117 138.797 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M556.839 159.167 L556.839 174.815 L552.58 174.815 L552.58 159.306 Q552.58 155.626 551.144 153.797 Q549.709 151.968 546.839 151.968 Q543.39 151.968 541.399 154.167 Q539.408 156.366 539.408 160.163 L539.408 174.815 L535.126 174.815 L535.126 148.889 L539.408 148.889 L539.408 152.917 Q540.936 150.579 542.996 149.422 Q545.08 148.264 547.788 148.264 Q552.256 148.264 554.547 151.042 Q556.839 153.797 556.839 159.167 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M575.566 138.843 Q572.464 144.167 570.959 149.376 Q569.455 154.584 569.455 159.931 Q569.455 165.278 570.959 170.533 Q572.487 175.764 575.566 181.065 L571.862 181.065 Q568.39 175.625 566.654 170.371 Q564.941 165.116 564.941 159.931 Q564.941 154.769 566.654 149.538 Q568.367 144.306 571.862 138.843 L575.566 138.843 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M605.38 148.889 L596.005 161.505 L605.866 174.815 L600.843 174.815 L593.297 164.63 L585.751 174.815 L580.728 174.815 L590.797 161.251 L581.584 148.889 L586.607 148.889 L593.482 158.126 L600.357 148.889 L605.38 148.889 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M611.214 138.843 L614.917 138.843 Q618.389 144.306 620.102 149.538 Q621.839 154.769 621.839 159.931 Q621.839 165.116 620.102 170.371 Q618.389 175.625 614.917 181.065 L611.214 181.065 Q614.292 175.764 615.797 170.533 Q617.325 165.278 617.325 159.931 Q617.325 154.584 615.797 149.376 Q614.292 144.167 611.214 138.843 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip950)" style="stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.436,209.375 468.365,209.375 "></polyline>
<path clip-path="url(#clip950)" d="M516.029 201.725 L516.029 205.706 Q514.223 204.711 512.395 204.225 Q510.589 203.716 508.737 203.716 Q504.594 203.716 502.302 206.354 Q500.01 208.97 500.01 213.716 Q500.01 218.461 502.302 221.1 Q504.594 223.715 508.737 223.715 Q510.589 223.715 512.395 223.229 Q514.223 222.72 516.029 221.725 L516.029 225.66 Q514.247 226.493 512.325 226.91 Q510.427 227.327 508.274 227.327 Q502.418 227.327 498.969 223.646 Q495.52 219.965 495.52 213.716 Q495.52 207.373 498.992 203.739 Q502.487 200.104 508.552 200.104 Q510.52 200.104 512.395 200.521 Q514.27 200.915 516.029 201.725 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M523.436 190.637 L527.696 190.637 L527.696 226.655 L523.436 226.655 L523.436 190.637 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M536.608 200.729 L540.867 200.729 L540.867 226.655 L536.608 226.655 L536.608 200.729 M536.608 190.637 L540.867 190.637 L540.867 196.03 L536.608 196.03 L536.608 190.637 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M553.899 222.766 L553.899 236.516 L549.617 236.516 L549.617 200.729 L553.899 200.729 L553.899 204.665 Q555.242 202.35 557.279 201.239 Q559.339 200.104 562.186 200.104 Q566.908 200.104 569.848 203.854 Q572.811 207.604 572.811 213.716 Q572.811 219.827 569.848 223.577 Q566.908 227.327 562.186 227.327 Q559.339 227.327 557.279 226.215 Q555.242 225.081 553.899 222.766 M568.39 213.716 Q568.39 209.016 566.445 206.354 Q564.524 203.669 561.144 203.669 Q557.765 203.669 555.82 206.354 Q553.899 209.016 553.899 213.716 Q553.899 218.415 555.82 221.1 Q557.765 223.762 561.144 223.762 Q564.524 223.762 566.445 221.1 Q568.39 218.415 568.39 213.716 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M583.992 222.766 L583.992 236.516 L579.709 236.516 L579.709 200.729 L583.992 200.729 L583.992 204.665 Q585.334 202.35 587.371 201.239 Q589.431 200.104 592.279 200.104 Q597.001 200.104 599.941 203.854 Q602.903 207.604 602.903 213.716 Q602.903 219.827 599.941 223.577 Q597.001 227.327 592.279 227.327 Q589.431 227.327 587.371 226.215 Q585.334 225.081 583.992 222.766 M598.482 213.716 Q598.482 209.016 596.538 206.354 Q594.616 203.669 591.237 203.669 Q587.857 203.669 585.913 206.354 Q583.992 209.016 583.992 213.716 Q583.992 218.415 585.913 221.1 Q587.857 223.762 591.237 223.762 Q594.616 223.762 596.538 221.1 Q598.482 218.415 598.482 213.716 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M632.139 212.628 L632.139 214.711 L612.556 214.711 Q612.834 219.109 615.195 221.424 Q617.579 223.715 621.815 223.715 Q624.269 223.715 626.561 223.114 Q628.876 222.512 631.144 221.308 L631.144 225.336 Q628.852 226.308 626.445 226.817 Q624.038 227.327 621.561 227.327 Q615.357 227.327 611.723 223.715 Q608.112 220.104 608.112 213.947 Q608.112 207.581 611.538 203.854 Q614.987 200.104 620.82 200.104 Q626.051 200.104 629.084 203.484 Q632.139 206.841 632.139 212.628 M627.88 211.378 Q627.834 207.882 625.913 205.799 Q624.014 203.716 620.866 203.716 Q617.302 203.716 615.149 205.729 Q613.019 207.743 612.695 211.401 L627.88 211.378 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M656.19 204.665 L656.19 190.637 L660.449 190.637 L660.449 226.655 L656.19 226.655 L656.19 222.766 Q654.848 225.081 652.787 226.215 Q650.75 227.327 647.88 227.327 Q643.181 227.327 640.218 223.577 Q637.278 219.827 637.278 213.716 Q637.278 207.604 640.218 203.854 Q643.181 200.104 647.88 200.104 Q650.75 200.104 652.787 201.239 Q654.848 202.35 656.19 204.665 M641.676 213.716 Q641.676 218.415 643.598 221.1 Q645.542 223.762 648.922 223.762 Q652.301 223.762 654.246 221.1 Q656.19 218.415 656.19 213.716 Q656.19 209.016 654.246 206.354 Q652.301 203.669 648.922 203.669 Q645.542 203.669 643.598 206.354 Q641.676 209.016 641.676 213.716 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M700.82 201.493 L700.82 205.521 Q699.014 204.595 697.07 204.132 Q695.125 203.669 693.042 203.669 Q689.871 203.669 688.273 204.641 Q686.699 205.614 686.699 207.558 Q686.699 209.04 687.834 209.896 Q688.968 210.729 692.394 211.493 L693.852 211.817 Q698.389 212.79 700.287 214.572 Q702.208 216.331 702.208 219.503 Q702.208 223.114 699.338 225.22 Q696.491 227.327 691.491 227.327 Q689.408 227.327 687.139 226.91 Q684.894 226.516 682.394 225.706 L682.394 221.308 Q684.755 222.535 687.047 223.16 Q689.338 223.762 691.584 223.762 Q694.593 223.762 696.213 222.743 Q697.833 221.702 697.833 219.827 Q697.833 218.09 696.653 217.165 Q695.496 216.239 691.537 215.382 L690.056 215.035 Q686.097 214.202 684.338 212.489 Q682.579 210.753 682.579 207.743 Q682.579 204.086 685.172 202.095 Q687.764 200.104 692.533 200.104 Q694.894 200.104 696.977 200.452 Q699.06 200.799 700.82 201.493 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M708.991 200.729 L713.25 200.729 L713.25 226.655 L708.991 226.655 L708.991 200.729 M708.991 190.637 L713.25 190.637 L713.25 196.03 L708.991 196.03 L708.991 190.637 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M743.713 211.007 L743.713 226.655 L739.454 226.655 L739.454 211.146 Q739.454 207.466 738.018 205.637 Q736.583 203.808 733.713 203.808 Q730.264 203.808 728.273 206.007 Q726.282 208.206 726.282 212.003 L726.282 226.655 L722 226.655 L722 200.729 L726.282 200.729 L726.282 204.757 Q727.81 202.419 729.87 201.262 Q731.954 200.104 734.662 200.104 Q739.13 200.104 741.421 202.882 Q743.713 205.637 743.713 211.007 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M762.44 190.683 Q759.338 196.007 757.833 201.216 Q756.329 206.424 756.329 211.771 Q756.329 217.118 757.833 222.373 Q759.361 227.604 762.44 232.905 L758.736 232.905 Q755.264 227.465 753.528 222.211 Q751.815 216.956 751.815 211.771 Q751.815 206.609 753.528 201.378 Q755.241 196.146 758.736 190.683 L762.44 190.683 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M792.254 200.729 L782.879 213.345 L792.74 226.655 L787.717 226.655 L780.171 216.47 L772.625 226.655 L767.602 226.655 L777.671 213.091 L768.458 200.729 L773.481 200.729 L780.356 209.966 L787.231 200.729 L792.254 200.729 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip950)" d="M798.088 190.683 L801.791 190.683 Q805.263 196.146 806.976 201.378 Q808.713 206.609 808.713 211.771 Q808.713 216.956 806.976 222.211 Q805.263 227.465 801.791 232.905 L798.088 232.905 Q801.166 227.604 802.671 222.373 Q804.199 217.118 804.199 211.771 Q804.199 206.424 802.671 201.216 Q801.166 196.007 798.088 190.683 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
</section>
<section id="let-the-data-flow" class="level2">
<h2 data-anchor-id="let-the-data-flow">Let the data flow</h2>
<p>First lets use the newly acquired powers to get rid of the letters in our line. Any function, that returns a <code>Boolean</code>, can be used inside a <code>filter</code>.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb13-1">cal_digits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>"12345"</code></pre>
</div>
</div>
<p>Notice we do don’t explicitly provide any input to the <code>isdigit</code> function, instead <code>filter</code> does it for us. It applies the <code>isdigit</code> function to every element of the collection, and if the result is <code>True</code>, the corresponding element gets to live a bit longer in the new, filtered collection.</p>
<p>Now, we can proceed to extract the first and last digits from the refined string.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb15-1">first_cal_digit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(cal_digits)</span>
<span id="cb15-2">last_cal_digit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span>(cal_digits)</span>
<span id="cb15-3">cal_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first_cal_digit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> last_cal_digit</span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, cal_number)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>15</code></pre>
</div>
</div>
<p>We’ve achieved a pretty concise code. More importanetly, it is self-documenting as variable names clearly convey our intentions. I, however, don’t like it. <code>first_cal_digit</code> variable name duplicates what <code>first(cal_digits)</code> communicates. Furthermore, its lifespan is pretty short so we don’t really need it. These short-lived variables can be ommited by using nested function calls:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'1': ASCII/Unicode U+0031 (category Nd: Number, decimal digit)</code></pre>
</div>
</div>
<p>However, nesting has a nasty habit of creating a sea of parentheses</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">something</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">important</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">this</span>(data)))))</span></code></pre></div>
</div>
<p>This was typically remedied by tools like <a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets">Rainbow Brackets</a>. However, there are more elegant solutions.</p>
<p>One such approach is function composition. Picture glueing the output of one function to the input of another. This enables us to construct new function without the need for intermediate variables.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb20-1">function_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> something <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> important <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> with <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> this</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">function_chain</span>(data)</span></code></pre></div>
</div>
<p>The <code>∘</code> operator composes (glues) functions together. No intermediate variables necessary.</p>
<p>Similar solution can also be achieved by piping the <code>data</code> with a <code>|&gt;</code> (pipe) operator.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb21-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> this <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> with <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> important <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> something <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> make</span></code></pre></div>
</div>
<p>Notice how the flow of data changes direction. The input data, on the left, is piped through successive functions. It’s important to emphasize that the execution order remains unchanged. With composed functions, the last function in the chain would operate on the data first.</p>
<p>Some languages allow for piping <code>&lt;|</code> both ways <code>|&gt;</code>. Julia does not. This can lead to some confusing code if <code>|&gt;</code> and <code>∘</code> are used together.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb22-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">π</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> sin</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>0.0</code></pre>
</div>
</div>
<p><code>π</code> is first applied to <code>sin</code> and the result is then rounded.</p>
<p>We can use piping to find the first digit in our filtered string:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> first</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'1': ASCII/Unicode U+0031 (category Nd: Number, decimal digit)</code></pre>
</div>
</div>
<p>As you can see, piping is a neat way of pushing data through a chain of operations.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb26-1">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> massage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> this <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> into <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> something <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> different</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  Input(data):::data --&gt; A[massage] --&gt; B[this] --&gt; C[into] --&gt; D[something] --&gt; E[different] --&gt; Result(output):::data
  classDef data fill:#C5F4E0
</pre>
</div>
</div>
</div>
</div>
<p>There is, however, a small problem. These functions take one input and return one output. Yet, our task involves extracting two things: the first and last digits. Subsequently, we need to sum these two numbers.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  Input(cal_line):::data --&gt; Filter[filter numbers]
  Filter --&gt; First[get first number] &amp; Last[get last number] --&gt; Join[join] --&gt; Result(cal_number):::data
  classDef data fill:#C5F4E0
</pre>
</div>
</div>
</div>
</div>
<p>We can massage our flow diagram, using Julia’s <a href="https://docs.julialang.org/en/v1/manual/arrays/#Broadcasting">broadcasting</a> mechanism, until we get a nice straight diagram:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  Input(cal_line):::data --&gt; Filter[filter numbers]
  Filter -.-&gt; Numbers[[get first and last numbers]] -.-&gt; Join[join] --&gt; Result(cal_number):::data
  classDef data fill:#C5F4E0
</pre>
</div>
</div>
</div>
</div>
<section id="massaging-the-chain" class="level3">
<h3 data-anchor-id="massaging-the-chain">Massaging the chain</h3>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> (first, last)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>('1', '5')</code></pre>
</div>
</div>
<p>Two crucial things happen here. First, <code>(first, last)</code> is a tuple (collection) of functions.</p>
<p>Julia offers many ways of grouping things into a some form of collection: tuples, named tuples, arrays, dictionaries, structs, …. You can thing of tuples as a versatile container that holds multiple things without much boilerplate. They prove especially usefull when joining things for a moment, just as we need here.</p>
<p>The dot represents a broadcast operator. <code>.|&gt;</code> is a way of piping the data into multiple things at once, broadcasting data into individual inputs.</p>
<p>It functions similarly as <code>cos.([π,π])</code>, where two pies are shoved into a cosine even though the cosine function can only handle one pie at a time.</p>
<p>Now we do have our first and last digits captured, but they still are in a character form. We need to convert them to numbers. As you may observe, the output of the previous operation is <code>('1', '5')</code> This is a tuple of characters. A <code>join</code> function can create a string out of that.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> (first, last) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> join</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>"15"</code></pre>
</div>
</div>
<p>The resulting string should be reinterpreted as a number. The <code>parse</code> function can do that for us but it requires two inputs: <em>what</em> to parse and <em>how</em> to parse it. To incorporate it into our streamlined code flow, we must embed one of the inputs.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parseint</span>(number) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, number) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parseint() function has one input and one output</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> (first, last) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> join <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> parseint</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>15</code></pre>
</div>
</div>
</section>
</section>
<section id="interlude-iii-function-that-must-not-be-named" class="level2 page-columns page-full">
<h2 data-anchor-id="interlude-iii-function-that-must-not-be-named">Interlude III: Function-That-Must-Not-Be-Named</h2>
<p>As with variables, we can get rid of naming this short lived function by using an anonymous function. An anonymous function is a function without a name. Consider this function:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>double (generic function with 1 method)</code></pre>
</div>
</div>
<p>It doubles whatever we feed to it. Now, let’s create an anonymous version of this function:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb35-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>#13 (generic function with 1 method)</code></pre>
</div>
</div>
<p>Julia made it for us. It is function <code>#13</code>. Where is it then? How do we call it?</p>
<div class="page-columns page-full"><p>Function <code>#13</code> is indeed quite unlucky. We did not catch it in time<sup>1</sup> and it went to the void. Confusingly, we can name an anonymous function.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;A Pokémon function?</p></li></div></div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb37-1">twofold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>x</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">twofold</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>10</code></pre>
</div>
</div>
<p>Most common use of these anonymous functions is existence in a chain of functions or being passed to another function.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>x, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-&gt;2x is an anonymous function that is passed to a map function</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>3-element Vector{Int64}:
 2
 4
 6</code></pre>
</div>
</div>
<p>We will leverage this technique to parse a string into an integer. Now, the line parsing is complete.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, cal_line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> (first, last) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> join <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, n)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>15</code></pre>
</div>
</div>
</section>
<section id="answer-to-the-problem" class="level2">
<h2 data-anchor-id="answer-to-the-problem">Answer to the problem</h2>
<p>We can now assemble all the pieces to solve the Advent of Code day 1 problem. We take the line parser we just wrote and wrap it in a function so we can parse any line we throw at it. Then, for each line in our <code>calibration</code> string, extract a calibration value. The sum of all calibration values is our answer.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode julia"><code class="sourceCode julia"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_value</span>(line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isdigit, line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> (first, last) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> join <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, n)</span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IOBuffer</span>(calibration) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> eachline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> cal_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> sum</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>142</code></pre>
</div>
</div>
<p>The answer to the problem is 142.</p>
</section>
<section id="takeaways" class="level2 page-columns page-full">
<h2 data-anchor-id="takeaways">Takeaways</h2>
<p>Try to describe the solution algorithm in a sentence. Don’t focus on implementation just yet. Each verb in your description is a good candidate for a function. Each function can be thought as a sub-problem.</p>
<p>Breaking down large problems into smaller, well-defined sub-problems not only makes makes the code more manageable but also enhances readability and maintainability. Strive to solve these isolated problems as <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>. This kind of code organisation also works really well with <a href="https://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a> (TDD).</p>
<div class="page-columns page-full"><p>The smaller the problem the less code you need to write to solve it. Long and complex code can be challenging to navigate and reason about. Try keeping related code on one monitor screen<sup>2</sup> for better comprehension, easier debugging and more efficient development.</p><div class="no-row-height column-margin column-container"><li id="fn2"><p><sup>2</sup>&nbsp;Rotating the monitor helps.</p></li></div></div>
<p>Avoid iterating over data with a for loop unless you really have to. It is a short way to <a href="https://en.wikipedia.org/wiki/Off-by-one_error">off-by-one</a> and out-of-bounds errors. You will also be tempted to change variables inside the for loop and to create loops inside loops. Good luck debugging that.</p>


</section>


 ]]></description>
  <category>Julia</category>
  <category>functional programming</category>
  <category>Advent of Code</category>
  <guid>https://sheep.observer/programming/Julia-piping/piping.html</guid>
  <pubDate>Mon, 11 Dec 2023 23:00:00 GMT</pubDate>
  <media:content url="https://sheep.observer/programming/Julia-piping/pipe.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Mapping with LIDAR data</title>
  <dc:creator>Szymon Bęczkowski</dc:creator>
  <link>https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/mapping-with-LIDAR-data.html</link>
  <description><![CDATA[ 



<section id="foliage-sucks" class="level2 page-columns page-full">
<h2 data-anchor-id="foliage-sucks">Foliage sucks</h2>
<p>Urban trees, especially big dense ones, are becoming a rare sight in our environment. They provide habitat for many species, offer shade in the summer, combat the heat island effect, reduce stormwater pollution, filter air, absorb noise and are beneficial for our mental health. Despite all these superb benefits I have one bone to pick with them—they block my view from above.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/bunker-aerial.jpg" style="width:80.0%" alt="Aerial view of forrest." class="figure-img"></p>
</figure>
</div>
<p>The area you see above is a <code>natural=wood</code> for OSM mapper. There are some quirks on how you map an area like this. OSM wiki mentions <a href="https://wiki.openstreetmap.org/wiki/Forest#Which_tag_should_be_used?">six different approaches</a>. Irrespective of the approach taken, one question remains: what is under the trees?</p>
<p>If you are lucky, there may be a different map source where the imagery is taken in the winter months, with fewer leaves on the trees. If you are mapping an urban place, you may see GPS traces taken by joggers. That will give you an idea about path locations.</p>
<p>Enter LIDAR. LIDAR generates a 3D representation of the scanned area using laser pulses. The first practical LIDAR systems date back to the 60s, but until recently, LIDAR was limited in&nbsp;applications. Recent advancements in data processing, have made its use more common.</p>
<p>It is now used, for example, to archive heritage sites so that they can be viewed by the future generations. They&nbsp;are also used in agriculture for crop monitoring.</p>
<p>LIDAR became more widely known by the general public when it was used to <a href="https://www.smithsonianmag.com/science-nature/lost-cities-of-the-amazon-discovered-from-the-air-180980142/">discover artifacts</a> of <a href="https://www.youtube.com/watch?v=dphq5X-rMew">ancient civilisations</a>. These artifacts were, until now, hidden under the canopy of the rainforest. LIDAR scanning revealed a network of settlements within the Amazon forest. Similar to Amazon surveyors, we can now use LIDAR data to reveal hidden objects under the canopy.</p>
<div class="column-page">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/bunker-LIDAR-surface.jpg" alt="LIDAR view of forrest with visible foliage."></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/bunker-LIDAR-terrain.jpg" alt="LIDAR view of terrain under forest. Foliage not visible."></p>
</div>
</div>
</div>
</div>
<p>Above, you see two images of the same forest area, as above, but seen by the LIDAR system. The second image reveals a structure underneath the foliage. In this case, it is a Second World War era hospital bunker that is in the area of a past airport. It is not visible from the air. It is not visible from the road. I only stumbled upon it thanks to geocaching.</p>
<p>But how does LIDAR see under the canopy?</p>
</section>
<section id="how-lidar-works" class="level2">
<h2 data-anchor-id="how-lidar-works">How LIDAR works</h2>
<p>A LIDAR detector is flown overhead a terrain and short laser pulses are emitted towards the ground. The system then measures the distance to the surface that the laser targeted. Knowing the position of the senor and laser pulse direction the LIDAR can calculate the position&nbsp;of the object hit by the laser pulse. A&nbsp;3D point cloud is then slowly built while the laser scans the terrain.</p>
<p>Sometimes, the laser pulse will hit a&nbsp;leaf. Other times, it will accidentally find an opening between leaves and reach the&nbsp;ground. The resulting point cloud then consists of the points that hit the ground surface and points that hit random leaves. By filtering points that are as high and as low as possible, we can then create two images: one including the foliage and one containing only the ground and solid&nbsp;objects.</p>
</section>
<section id="where-lidar-shines" class="level2 page-columns page-full">
<h2 data-anchor-id="where-lidar-shines">Where LIDAR shines</h2>
<p>For OSM mappers, LIDAR is especially useful for discovering and aligning paths in woody areas. The&nbsp;image below looks like a well-mapped nature area with many criss-crossing paths.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/paths-aerial.jpg" style="width:80.0%" alt="Aerial view of forrest." class="figure-img"></p>
</figure>
</div>
<p>Footpaths and bike tracks form long troughs on forest beds and are clearly visible on LIDAR imagery. Notice below how many paths are misaligned or just missing.</p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/paths-LIDAR-terrain.jpg" style="width:100.0%" alt="Aerial view of forrest." class="figure-img"></p>
</figure>
</div>
</div>
<p>Other geo features that are clearly visible on LIDAR images are water bodies, streams, embankments and ditches.</p>
<p>Not all countries have LIDAR data available. I have used Denmark as an example of excelent coverage. The source for the maps used is Styrelsen for Dataforsyning og Infrastruktur (SDFE aerial imagery, SDFE surface shadow map (40 cm) and SDFE terrain shadow map (40 cm)).</p>
<p>I hope you can use this technique to improve OpenStreetMap. If you are not an OSM editor, you can still use the LIDAR imagery to discover hidden gems in your surrounding area.</p>


</section>

 ]]></description>
  <category>imagery</category>
  <category>LIDAR</category>
  <guid>https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/mapping-with-LIDAR-data.html</guid>
  <pubDate>Thu, 29 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://sheep.observer/openstreetmap/mapping-with-LIDAR-data/bunker-LIDAR-surface.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Making LTSpice pretty</title>
  <dc:creator>Szymon Bęczkowski</dc:creator>
  <link>https://sheep.observer/electronics/LTSpice-color-theme/LTSpice-color-theme.html</link>
  <description><![CDATA[ 



<section id="color-theme" class="level2">
<h2 data-anchor-id="color-theme">Color theme</h2>
<p>You can change the default color palette of LTSpice. The default one is very depressing. I use a black and white theme with waveforms color scheme from MATLAB.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sheep.observer/electronics/LTSpice-color-theme/schematic.png"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://sheep.observer/electronics/LTSpice-color-theme/waveform.png"></p>
</div>
</div>
</div>
<p>Colors can be changed using GUI or by modifying the values in the <a href="https://www.eevblog.com/forum/eda/where-does-ltspice-keep-its-settings/">config file</a>.</p>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 87%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">OS</th>
<th style="text-align: left;">path</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">macOS</td>
<td style="text-align: left;"><code>~/Library/Preferences/LTC.LTspice.plist</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Windows</td>
<td style="text-align: left;"><code>%USERPROFILE%\AppData\Roaming\LTspiceXVII.ini</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Linux</td>
<td style="text-align: left;"><code>~/.wine/drive_c/users/$USER/Application\ Data/LTspiceXVII.ini</code></td>
</tr>
</tbody>
</table>
</section>
<section id="macos-caveats" class="level2">
<h2 data-anchor-id="macos-caveats">macOS caveats</h2>
<p>Do not try to edit the macOS <code>.plist</code> file as it is just a pretty-printed version of a binary file. <a href="https://github.com/johan162">johan162</a> made a <a href="https://github.com/johan162/themeltspice">color theme manager</a> script to simplify theme changes on macOS. The script comes with a few <a href="https://github.com/johan162/themeltspice#theme-reference-screenshots">themes</a>. You can add your own theme to the <code>~/.ltspice_themes/themes.ltt</code> list and set that as default. This is what I use:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb1-1">[szymon]</span>
<span id="cb1-2">GridColor=9868950</span>
<span id="cb1-3">InActiveAxisColor=9868950</span>
<span id="cb1-4">WaveColor0=16777215</span>
<span id="cb1-5">WaveColor1=11513775</span>
<span id="cb1-6">WaveColor2=11826975</span>
<span id="cb1-7">WaveColor3=884479</span>
<span id="cb1-8">WaveColor4=2859051</span>
<span id="cb1-9">WaveColor5=2631381</span>
<span id="cb1-10">WaveColor6=12412564</span>
<span id="cb1-11">WaveColor7=4871819</span>
<span id="cb1-12">WaveColor8=12744675</span>
<span id="cb1-13">WaveColor9=8289918</span>
<span id="cb1-14">WaveColor10=2211260</span>
<span id="cb1-15">WaveColor11=13614615</span>
<span id="cb1-16">WaveColor12=128</span>
<span id="cb1-17">WaveColor13=44975</span>
<span id="cb1-18">SchematicColor0=0</span>
<span id="cb1-19">SchematicColor1=2631720</span>
<span id="cb1-20">SchematicColor2=0</span>
<span id="cb1-21">SchematicColor3=0</span>
<span id="cb1-22">SchematicColor4=12648447</span>
<span id="cb1-23">SchematicColor5=0</span>
<span id="cb1-24">SchematicColor6=0</span>
<span id="cb1-25">SchematicColor7=0</span>
<span id="cb1-26">SchematicColor8=9868950</span>
<span id="cb1-27">SchematicColor9=0</span>
<span id="cb1-28">SchematicColor10=11210240</span>
<span id="cb1-29">SchematicColor11=16777215</span>
<span id="cb1-30">SchematicColor12=16777215</span>
<span id="cb1-31">NetlistEditorColor0=0</span>
<span id="cb1-32">NetlistEditorColor1=32512</span>
<span id="cb1-33">NetlistEditorColor2=16711680</span>
<span id="cb1-34">NetlistEditorColor3=155</span>
<span id="cb1-35">NetlistEditorColor4=16777215</span></code></pre></div>


</section>

 ]]></description>
  <category>SPICE</category>
  <category>LTspice</category>
  <guid>https://sheep.observer/electronics/LTSpice-color-theme/LTSpice-color-theme.html</guid>
  <pubDate>Fri, 23 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://sheep.observer/electronics/LTSpice-color-theme/schematic.png" medium="image" type="image/png" height="102" width="144"/>
</item>
</channel>
</rss>
